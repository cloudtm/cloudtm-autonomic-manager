#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

//#include "ROOT-Sim.h"

#include "../states.h"
#include "transaction_list_manager.h"
#include "../network/net.h"

//return the server id
int get_server(state_type *state) {
	return RandomRange(0, state->num_servers - 1) + state->num_clients;
}

//Function per la stampa delle statistiche di un oggetto client
void client_print_stat(CLIENT_lp_state_type * pointer, double now) {

	printf(
			"Next_txn_id:%i\t\t started_runs:%i\t\t committed_transactions:%i\t\t aborted_runs:%i\t active_transactions:%i\t in_backoff_transactions:%i\t%f\t%f\n",
			pointer->next_transaction_id, pointer->started_runs,
			pointer->committed_transactions, pointer->aborted_runs,
			pointer->active_transactions, pointer->in_backoff_transactions,
			pointer->committed_transactions / now, now);

	fflush(stdout);

}

void run_started(int tx_run_number, CLIENT_lp_state_type * pointer, double now) {
	pointer->active_transactions++;
	pointer->started_runs++;

	if (tx_run_number > 0) {
		pointer->in_backoff_transactions--;
	}

	if (pointer->configuration.print_execution_info) {
		if (((pointer->committed_transactions * 100)
				% pointer->configuration.number_of_transactions) == 0) {
			client_print_stat(pointer, now);
		}
	}
}

//Function per ricavare ed eseguire la prossima operazione di una transazione su un client
operation_descriptor *next_operation_request(int tx_id, int tx_run_number,
		time_type delay, state_type *state, time_type now) {

	// Get the client configuration from simulation state
	CLIENT_lp_state_type *pointer = &state->type.client_state;

	event_content_type new_event_content;

	transaction_descriptor * tx_descr = get_transaction(tx_id,
			pointer->transaction_list);
	operation_descriptor * op_descr;

	if (tx_descr != NULL) {
		op_descr = get_next_operation(tx_descr);
	} else {
		return NULL;
	}

	if (op_descr != NULL) {
		// send the next operation to server
		new_event_content.applicative_content.tx_id = tx_id;
		new_event_content.applicative_content.tx_run_number = tx_run_number;
		new_event_content.applicative_content.tx_class_id =
				tx_descr->tx_class_id;
		new_event_content.applicative_content.op_number = op_descr->op_number;
		new_event_content.applicative_content.object_key_id =
				op_descr->object_key_id;
		new_event_content.applicative_content.op_type = op_descr->op_type;
		new_event_content.applicative_content.client_id = pointer->client_id;
		new_event_content.applicative_content.server_id = tx_descr->server_id;
		new_event_content.origin_object_id = pointer->client_id;
		new_event_content.destination_object_id = tx_descr->server_id;

		net_send_message(pointer->client_id, tx_descr->server_id,
				&new_event_content, state->num_clients, state->num_servers,
				now + delay);

		if (pointer->configuration.client_verbose) {
			printf(
					"C%i - inviato evento %i (TX_PUT|TX_GET) al tempo %f, operazione num %i della transazione %i\n",
					pointer->client_id, op_descr->op_type, now + delay,
					op_descr->op_number, tx_id);
		}
		return op_descr;
	} else {
		// all operations of the transaction have already been executed...
		return NULL;
	}
}

//Function per creare e restituire una nuova transazione
transaction_descriptor *new_transaction(state_type *state, double now) {

// Get the client configuration from simulation state
	CLIENT_lp_state_type *pointer = &state->type.client_state;

	if (pointer->configuration.workload_type == SYNTHETIC) {
		transaction_descriptor *tx = create_new_transaction(state,
				&pointer->transaction_list, pointer->next_transaction_id++,
				(double) pointer->configuration.data_items_zipf_const);
		tx->server_id = get_server(state);
		return tx;

	} else if (pointer->configuration.workload_type == FROM_TRACE) {
		// TODO: Alessandro: lascio uno stub
		return NULL;
//		return create_new_transaction_from_trace(&pointer->transaction_list, pointer->next_transaction_id++, pointer->configuration.data_items_access_distribution, (double)pointer->configuration.data_items_zipf_const);
	}

	return NULL;
}

//Function per eseguire una transazione su un client
transaction_descriptor * transaction_run_request(
		transaction_descriptor *tx_descr, int run_number, time_type delay,
		state_type *state, time_type now) {

// Get the client configuration from simulation state
	CLIENT_lp_state_type *pointer = &state->type.client_state;

	event_content_type new_event_content;
	new_event_content.applicative_content.tx_id = tx_descr->tx_id;
	new_event_content.applicative_content.tx_class_id = tx_descr->tx_class_id;
	new_event_content.applicative_content.tx_run_number = run_number;
	new_event_content.applicative_content.client_id = pointer->client_id;
	new_event_content.applicative_content.op_type = TX_BEGIN;
	new_event_content.applicative_content.op_number = 0;
	new_event_content.applicative_content.client_id = pointer->client_id;
	new_event_content.applicative_content.server_id = tx_descr->server_id;
	new_event_content.destination_object_id = tx_descr->server_id;
	new_event_content.origin_object_id = pointer->client_id;

	net_send_message(pointer->client_id, tx_descr->server_id,
			&new_event_content, state->num_clients, state->num_servers,
			now + delay);

	if (pointer->configuration.client_verbose) {
		printf(
				"C%i - inviato evento TX_BEGIN  al tempo %f, operazione num %i della transazione %i\n",
				pointer->client_id, now, 0, tx_descr->tx_id);
	}
	run_started(run_number, pointer, now);
	return tx_descr;
}

//send the commit request to server for transaction tx_id
void commit_request(int tx_id, int tx_run_number, time_type delay,
		time_type now, state_type *state, event_content_type *message) {
// Get the client configuration from simulation state
	CLIENT_lp_state_type *pointer = &state->type.client_state;

	transaction_descriptor * tx_descr = get_transaction(tx_id,
			pointer->transaction_list);

	event_content_type new_event_content;
	memcpy(&new_event_content, message, sizeof(event_content_type));
	new_event_content.applicative_content.tx_id = tx_descr->tx_id;
	new_event_content.applicative_content.tx_run_number = tx_run_number;
	new_event_content.destination_object_id = tx_descr->server_id;
	new_event_content.origin_object_id = pointer->client_id;
	new_event_content.applicative_content.op_type = TX_COMMIT;

	net_send_message(pointer->client_id, tx_descr->server_id,
			&new_event_content, state->num_clients, state->num_servers,
			now + delay);

	if (pointer->configuration.client_verbose) {
		printf(
				"C%i - inviato evento COMMIT_REQUEST a TM con tx_id %i al tempo %f\n",
				pointer->client_id, tx_descr->tx_id, now);
	}
}

//Function per il processamento di un evento lato client
void CLIENT_ProcessEvent(unsigned int me, double now, int event_type,
		event_content_type *event_content, unsigned int size, state_type *state) {
	event_content_type new_event_content;
	transaction_descriptor * tx_descr;
	operation_descriptor * next_op;
	double delay;
	int i;

// Get the client configuration from simulation state
	CLIENT_lp_state_type *pointer = &state->type.client_state;

//switch on basis of event_type
	switch (event_type) {

	case INIT:
		//initialize cliet state
		if (pointer->configuration.client_verbose) {
			printf("C%i - ricevuto evento SHARE_CONF\n", pointer->client_id);
		}

		// Store initial values
		pointer->client_id = me;
		pointer->next_transaction_id =
				pointer->configuration.number_of_transactions
						* pointer->client_id;
		pointer->aborted_runs = 0;
		pointer->started_runs = 0;
		pointer->committed_transactions = 0;
		pointer->executed_get_operation = 0;
		pointer->executed_put_operation = 0;
		pointer->active_transactions = 0;
		pointer->in_backoff_transactions = 0;
		pointer->transaction_list = NULL;
		pointer->ending = 0;
		pointer->total_transaction_execution_time = 0;

		if (pointer->configuration.system_model == CLOSED) {
			for (i = 0; i < pointer->configuration.number_of_threads; i++) {
				if (pointer->committed_transactions
						< pointer->configuration.number_of_transactions) {
					tx_descr = new_transaction(state, now);

					if (pointer->configuration.workload_type == 0) {
						delay =
								Expent(
										((double) pointer->configuration.inter_tx_think_time));
					} else {
						delay = tx_descr->previous_ntbc;
					}
					tx_descr->start_time = delay;
					tx_descr->last_run_start_time = delay;

					transaction_run_request(tx_descr, 0, delay, state, now);
				}
			}
		}

		// se il sistema e' aperto invia una richiesta iniziale e invia a se stesso l'evento per generare la richiesta del prossimo BEGIN
		if (pointer->configuration.system_model == OPEN) {
			delay = Expent((0));
			ScheduleNewEvent(me, now + delay, RUN_NEW_TX, &new_event_content,
					sizeof(event_content_type));
		}

		break;

		//gestione dei messaggi lato client
	case DELIVER_MESSAGE:
		//gestione in base al campo op_type dell'evento
		switch (event_content->applicative_content.op_type) {

		case TX_BEGIN_RETURN:
		case TX_PUT_RETURN:
		case TX_GET_RETURN:
			if (pointer->configuration.client_verbose) {
				printf(
						"C%i - ricevuto evento %i (TX_ BEGIN|GET|PUT _RETURN) per op %i della tx %i al tempo %f\n",
						me, event_content->applicative_content.op_type,
						event_content->applicative_content.op_number,
						event_content->applicative_content.tx_id, now);
			}
			// send the next operation request, if any, to server...
			//delay = get_tpcc_inter_tx_operation_think_time(event_content->applicative_content.tx_class_id);
			delay = pointer->configuration.inter_tx_operation_think_time;
			next_op = next_operation_request(
					event_content->applicative_content.tx_id,
					event_content->applicative_content.tx_run_number, delay,
					state, now);
			// check if the last operation has been executed...
			if (next_op == NULL) {
				//... yes, send the commit request to server
				commit_request(event_content->applicative_content.tx_id,
						event_content->applicative_content.tx_run_number, delay,
						now, state, event_content);
			} else {
				if (next_op->op_type == TX_GET)
					pointer->executed_get_operation++;
				if (next_op->op_type == TX_PUT)
					pointer->executed_put_operation++;
			}
			break;

		case TX_EXECUTION_EXCEPTION:
			if (pointer->configuration.client_verbose) {
				printf(
						"C%i - ricevuto evento TX_EXECUTION_EXCEPTION con tx_id %i al tempo %f\n",
						pointer->client_id,
						event_content->applicative_content.tx_id, now);
			}
			pointer->active_transactions--;
			pointer->in_backoff_transactions++;
			pointer->aborted_runs++;
			tx_descr = get_transaction(event_content->applicative_content.tx_id,
					pointer->transaction_list);
			pointer->total_transaction_run_execution_time += now
					- tx_descr->last_run_start_time;
			//select back-off time
			delay = Expent(((double) pointer->configuration.backoff_time));
			tx_descr = get_transaction(event_content->applicative_content.tx_id,
					pointer->transaction_list);
			reset_transaction_state(tx_descr);
			//rerun transaction
			tx_descr->last_run_start_time = now + delay;
			transaction_run_request(tx_descr,
					event_content->applicative_content.tx_run_number + 1, delay,
					state, now);
			break;

		case TX_COMMIT_RESPONSE:

			if (pointer->configuration.client_verbose) {
				printf("C%i - ricevuto evento TX_COMMIT_RESPONSE al tempo %f\n",
						pointer->client_id, now);
			}

			//statistiche tempi di txn
			tx_descr = get_transaction(event_content->applicative_content.tx_id,
					pointer->transaction_list);

			pointer->total_transaction_execution_time += now
					- tx_descr->start_time;
			pointer->total_transaction_run_execution_time += now
					- tx_descr->last_run_start_time;
			pointer->committed_transactions++;
			pointer->active_transactions--;

			//remove committed transaction from list
			remove_transaction(event_content->applicative_content.tx_id,
					&pointer->transaction_list);

			// there are further transaction to execute?...
			if (pointer->committed_transactions
					< pointer->configuration.number_of_transactions) {
				//..yes, send the next transaction request to server..
				if (pointer->configuration.system_model == CLOSED) {
					tx_descr = new_transaction(state, now);
					if (pointer->configuration.workload_type == 0) {
						delay =
								Expent(
										((double) pointer->configuration.inter_tx_think_time));
					} else {
						delay = tx_descr->previous_ntbc;
					}
					tx_descr->last_run_start_time = now + delay;
					tx_descr->start_time = now + delay;
					transaction_run_request(tx_descr, 0, delay, state, now);
				}
			} else {
				if (pointer->committed_transactions
						== pointer->configuration.number_of_transactions) {
					//...no, transactions terminated, print final statistics...
					printf(
							"\nClient %i:\n\tlast transaction commit time: %f\n\taverage transaction execution time: %f\n\taverage transaction run execution time: %f\n\tthroughput = %f\n\tcommitted: %i\n\taborted: %i\n\tabort ratio = %f\n\tget: %i\n\tput: %i",
							pointer->client_id, now,
							pointer->total_transaction_execution_time
									/ (double) pointer->committed_transactions,
							pointer->total_transaction_run_execution_time
									/ (double) (pointer->committed_transactions
											+ pointer->aborted_runs),
							(double) pointer->configuration.number_of_transactions
									/ now, pointer->committed_transactions,
							pointer->aborted_runs,
							(double) pointer->aborted_runs
									/ ((double) pointer->aborted_runs
											+ (double) pointer->committed_transactions),
							pointer->executed_get_operation,
							pointer->executed_put_operation);
					fflush(stdout);
					if (pointer->ending == 0
							&& pointer->committed_transactions
									== pointer->configuration.number_of_transactions) {
						pointer->ending = 1;
					}
				}
			}
			break;
		}
		break;

// used only with open system
	case RUN_NEW_TX:
//send the next transaction request to server..
		if (!pointer->ending == 1) {
			tx_descr = new_transaction(state, now);
			tx_descr->start_time = now;
			tx_descr->last_run_start_time = now;
			transaction_run_request(tx_descr, 0, now, state, now);
//schedule the next transaction request to server..
			delay = Expent(
					((double) 1 / pointer->configuration.tx_arrival_rate));
			ScheduleNewEvent(me, now + delay, RUN_NEW_TX, &new_event_content,
				sizeof(event_content_type));
		}
		break;
	}

}
